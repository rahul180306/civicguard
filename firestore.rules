rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }

    match /users/{uid} {
  allow read: if isOwner(uid) || isAdmin();
  // Users can create their own doc; role can only be set by admin
  allow create: if isOwner(uid) && !("role" in request.resource.data) ;
  // Users can update their own doc but cannot change role
  allow update: if isOwner(uid) && request.resource.data.role == resource.data.role;
      allow delete: if false;
    }

    match /tickets/{ticketId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.owner_uid == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.owner_uid == request.auth.uid;
      allow update: if isAdmin() || (isSignedIn() && resource.data.owner_uid == request.auth.uid);
      allow delete: if false;

      function validClass(v) {
        return v in ['pothole','garbage','streetlight','water_leak','illegal_parking','stray_animals','unknown'];
      }
      function validStatus(v) {
        return v in ['CREATED','FILING','FILED','RESOLVED','FAILED'];
      }

      allow create, update: if request.resource.data.keys().hasAll(['owner_uid','iclass','status']) &&
        validClass(request.resource.data.iclass) && validStatus(request.resource.data.status);

      allow update: if isAdmin() || (isSignedIn() && resource.data.owner_uid == request.auth.uid && request.resource.data.status == 'CREATED');

      allow update: if isAdmin();
    }
  }
}
